diff --git a/es6/cartesian/getEquidistantTicks.js b/es6/cartesian/getEquidistantTicks.js
index 142f79fdeeb227b80099b06803599c00fc683973..dde99357d19a07ffb6f009d32f0f12fa6a346f60 100644
--- a/es6/cartesian/getEquidistantTicks.js
+++ b/es6/cartesian/getEquidistantTicks.js
@@ -7,7 +7,9 @@ export function getEquidistantTicks(sign, boundaries, getTickSize, ticks, minTic
   var index = 0;
   // Premature optimisation idea 1: Estimate a lower bound, and start from there.
   // For now, start from every tick
-  var stepsize = 1;
+  var stepsizes = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000];
+  var stepsize_index = 0;
+  var stepsize = stepsizes[stepsize_index];
   var start = initialStart;
   var _loop = function _loop() {
       // Given stepsize, evaluate whether every stepsize-th tick can be shown.
@@ -38,7 +40,8 @@ export function getEquidistantTicks(sign, boundaries, getTickSize, ticks, minTic
         // Start all over with a larger stepsize
         index = 0;
         start = initialStart;
-        stepsize += 1;
+        stepsize_index += 1;
+        stepsize = stepsizes[stepsize_index]
       }
       if (isShow) {
         // If it can be shown, update the start
